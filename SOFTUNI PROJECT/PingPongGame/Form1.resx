<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="mute.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
  <metadata name="timer1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="$this.TrayHeight" type="System.Int32, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>39</value>
  </metadata>
</root>